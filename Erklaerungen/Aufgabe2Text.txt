| Juliana Vorhees | Matrikelnr.: 1379954  |
| Celia Poltorak  | Matrikelnr.: 1383575  |
| Paula Petrovic  | Matrikelnr.: 1383687  |
-------------------------------------------

-------------------------------------------

Bewertung Aufgabe 2 (Shell Sort)
---------------------------------------

- Zeitdauer
-------------------------------------------

Bei den kleinen Problemen (runSmall):
a[        10]          0 Vergleiche          0 Vertauschungen       0.00 secs
a[       100]          0 Vergleiche          0 Vertauschungen       0.00 secs
a[      1000]          0 Vergleiche          0 Vertauschungen       0.00 secs
a[     10000]          0 Vergleiche          0 Vertauschungen       0.00 secs
a[     20000]          0 Vergleiche          0 Vertauschungen       0.00 secs
a[     40000]          0 Vergleiche          0 Vertauschungen       0.00 secs
a[     60000]          0 Vergleiche          0 Vertauschungen       0.00 secs

Bei den großen Problemen (runLarge):
a[    100000]          0 Vergleiche          0 Vertauschungen       0.01 secs
a[    200000]          0 Vergleiche          0 Vertauschungen       0.02 secs
a[    400000]          0 Vergleiche          0 Vertauschungen       0.05 secs
a[    800000]          0 Vergleiche          0 Vertauschungen       0.11 secs
a[   1000000]          0 Vergleiche          0 Vertauschungen       0.14 secs

- Komplexität
-------------------------------------------
Unser Shell Sort hat eine Best-Case-Komplexität von O(n log n) 
bei bereits sortierten Arrays, da nur wenige Verschiebungen nötig sind. Die Average-Case-Komplexität liegt 
bei O(n^(3/2)), wobei die genaue Performance von der Datenverteilung abhängt. Im Worst-Case erreicht der 
Algorithmus O(n²), wenn die Eingabedaten ungünstig für unsere Gap-Sequenz angeordnet sind, bessere 
Gap-Sequenzen wie Knuth oder Hibbard könnten dies auf O(n^(3/2)) reduzieren.

- Vergleich zu bekannten Sortierverfahren 
-------------------------------------------

| Verfahren       | Best Case       | Average Case    | Worst Case      |
|-----------------|-----------------|-----------------|-----------------|
| Quick Sort      | O(n log n)      | O(n log n)      | O(n²)           |
| Merge Sort      | O(n log n)      | O(n log n)      | O(n log n)      |
| Counting Sort   | O(n)            | O(n + m)        | O(n + m)        |
| Insertion Sort  | O(n)            | O(n²)           | O(n²)           |
| Shell Sort      | O(n log n)      | O(n^(3/2))      | O(n²)           |

Shell Sort ist schneller als einfache Algorithmen wie Bubble Sort und Insertion Sort für größere Datensätze,
da es Elemente frühzeitig über große Distanzen verschieben kann. Es ist jedoch im Allgemeinen langsamer als 
fortgeschrittene Algorithmen wie Merge Sort und Quick Sort, die eine Worst-Case-Komplexität von O(n log n) und O(n²) haben. 
Shell Sort ist besonders nützlich für mittelgroße Arrays, bei denen sowohl Einfachheit als auch Effizienz gefragt sind.